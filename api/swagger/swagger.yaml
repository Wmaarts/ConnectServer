swagger: "2.0"
info:
  version: "1.0.0"
  title: Connect Api
#
host: localhost:10010 # dev
# host: connect-ku.herokuapp.com # prod
#
# basePath prefixes all resource paths 
# basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /photos:
    x-swagger-router-controller: photoController
    post:
      description: Post a photo to the server
      operationId: postPhoto
      parameters:
        - name: photo
          description: photo properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/PostPhoto"
      responses:
        "201":
          description: Success
          schema:
            $ref: "#/definitions/GetPhotoResponse"
        "304":
          description: User is not currently present on the service
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /photos/{id}:
    x-swagger-router-controller: photoController
    get:
      description: Return photo by id
      operationId: getPhoto
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetPhotoResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /photos/user/{id}:
    x-swagger-router-controller: photoController
    get:
      description: Get all photos associated with this user
      operationId: getAllPhotosByUser
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetPhotoListResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      
  /photos/user/{firstUserId}/secondUser/{secondUserId}:
    x-swagger-router-controller: photoController
    get:
      description: Get all photos associated with both users
      operationId: getAllPhotosByTwoUsers
      parameters:
        - name: firstUserId
          type: string
          in: path
          required: true
        - name: secondUserId
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetPhotoListResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /photos/service/{id}:
    x-swagger-router-controller: photoController
    get:
      description: Get all photos by service id
      operationId: getAllPhotosByServiceId
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetPhotoListResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /users:
    x-swagger-router-controller: userController
    post:
      description: Post user to the server/database
      operationId: postUser
      parameters:
        - name: user
          description: user object
          in: body
          required: true
          schema:
            $ref: "#/definitions/PostPutUser"
      responses:
        "201":
          description: Succes
          schema:
            $ref: "#/definitions/GetUserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    
    get:
      description: Returns all the users to the caller
      operationId: getUsers
      
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetUserListResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /users/match/{userId}:
    x-swagger-router-controller: userController
    get:
      description: Returns a random user at the current event to the caller
      operationId: getUserMatch
      parameters:
        - name: userId
          type: string
          in: path
          required: true
      
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUserResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /users/{id}:
    x-swagger-router-controller: userController
    get:
      description: Get specific user by id
      operationId: getUser
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetUserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    
    put:
      description: Update user
      operationId: putUser
      parameters:
        - name: id
          type: string
          in: path
          required: true
        - name: user
          description: user properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/PostPutUser"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetUserResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /users/service/{id}:
    x-swagger-router-controller: userController
    get:
      description: Get all users by service id
      operationId: getAllUsersByService
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetUserListResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
       
  /services:
    x-swagger-router-controller: serviceController
    get:
      description: Returns all the services to the caller
      operationId: getServices
      parameters:
        - name : gtDate
          in : query
          type : string
          required : false
          description : Greater than date
        - name : ltDate
          in : query
          type : string
          required : false
          description : Lesser than date
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetServiceListResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /services/currentService:
    x-swagger-router-controller: serviceController
    get:
      description: Get service that is currently running
      operationId: getCurrentService
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetServiceResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
 
  /services/{id}:
    x-swagger-router-controller: serviceController
    get:
      description: Get service
      operationId: getService
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/GetServiceResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /services/user/onsite:
    x-swagger-router-controller: serviceController
    post:
      description: Post a user onSite to the service
      operationId: postUserOnSite
      parameters:
        - name: id
          description: user id reference who is on site
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserId"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetServiceResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  Photo:
    type: object
    properties:
      _id:
        type: string
      photoString:
        type: string
        description: actual photo on the database in string form
      firstUserId:
        type: string
        description: first user (the one who made the picture)
      secondUserId:
        type: string
        description: second user (photo partner)
    required:
      - photoString
      - firstUserId
      - secondUserId
  PostPhoto:
    type: object
    properties:
      photoString:
        $ref: "#/definitions/Photo/properties/photoString"
      firstUserId:
        $ref: "#/definitions/Photo/properties/firstUserId"
      secondUserId:
        $ref: "#/definitions/Photo/properties/secondUserId"
    required:
      - photoString
      - firstUserId
      - secondUserId
  User:
    type: object
    properties:
      _id:
        type: string
      role:
        type: string
      name:
        type: string
      telephoneNumber:
        type: string
      photoString:
        type: string
    required:
      - name
  PostPutUser:
    type: object
    properties:
      name:
        $ref: "#/definitions/User/properties/name"
      telephoneNumber:
        $ref: "#/definitions/User/properties/telephoneNumber"
      photoString:
        $ref: "#/definitions/User/properties/photoString"
    required:
      - name
  UserId:
    type: object
    properties:
      _id:
        type: string
    required:
      - _id
  Service:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      startDateTime:
        type: string
        format: date-time
      endDateTime:
        type: string
        format: date-time
      description:
        type: string
      geolocation:
        $ref: "#/definitions/Geolocation"
      usersVisited:
        type: array
        description: users with the app that are at the event/service
        items:
          type: string
      photos:
        type: array
        description: made photos at the event/service
        items:
          type: string
    required:
      - name
      - startDateTime
      - endDateTime
      - description
      - geolocation
  Geolocation:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
        description: name of location
      longitude:
        type: number 
        format: float
        description: y-vertical coordinate on map
      latitude:
        type: number
        format: float
        description: x-horizontal coordinate on map
  GetPhotoResponse:
    properties:
      Photo:
        $ref: "#/definitions/Photo"
  GetUserListResponse:
    required:
      - users
    properties:
      # The array of users
      users:
        type: array
        items: 
          $ref: "#/definitions/User"
  GetUserResponse:
    properties:
      user:
        $ref: "#/definitions/User"
  GetServiceResponse:
    properties:
      service:
        $ref: "#/definitions/Service"
  GetServiceListResponse:
    required:
      - services
    properties:
      services:
        type: array
        items:
          $ref: "#/definitions/Service"
  GetPhotoListResponse:
    required:
      - photos
    properties:
      photos:
        type: array
        items:
          $ref: "#/definitions/Photo"
  ErrorResponse:
    required:
      - code
      - message
    properties:
      code:
        type: number
      message:
        type: string